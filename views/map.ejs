<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <title>Leaflet Map - India Only</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" type="image/png" href="/image/favicon.png">
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css" />
  <!-- Bootstrap CSS for search UI -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" />

  <style>
    body,
    html {
      height: 100%;
      margin: 0;
      padding: 0;
    }

    #map {
      height: 100vh;
      width: 100vw;
      visibility: hidden;
      /* Hide initially */
    }

    .search-container {
      position: absolute;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 1000;
      width: 90%;
      max-width: 600px;
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      padding: 12px 16px;
      display: none;
      /* Hidden on load */
    }

    .search-box {
      display: flex;
      gap: 10px;
    }

    /* Fix dropdown arrow overlap */
    .search-box select {
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      padding-right: 30px;
      background-image:
        url("data:image/svg+xml;utf8,<svg fill='%23333' height='16' viewBox='0 0 24 24' width='16' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/></svg>");
      background-repeat: no-repeat;
      background-position: right 10px center;
      background-size: 16px 16px;
    }

    .search-box input,
    .search-box select {
      flex: 1;
      min-width: 0;
      padding: 10px 12px;
      font-size: 1rem;
      border: 1px solid #ccc;
      border-radius: 8px;
      outline: none;
    }

    .search-box button {
      padding: 10px 16px;
      font-size: 1rem;
      background-color: #0d6efd;
      color: white;
      border: none;
      border-radius: 8px;
      transition: background-color 0.2s ease;
    }

    .search-box button:hover {
      background-color: #0b5ed7;
    }

    .search-box select option {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    @media (max-width: 600px) {
      .search-box {
        flex-wrap: nowrap;
        gap: 10px;
        flex-direction: column;
      }

      .search-box input {
        font-size: 0.8rem;
        padding: 5px 7px;
      }

      .search-box select {
        font-size: 0.8rem;
        padding: 5px 7px;
      }

      .search-box button {
        font-size: 0.8rem;
        padding: 5px 7px;
      }
    }

    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: #24292f;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 3000;
      flex-direction: column;
    }

    .loading-logo {
  width: 80px;
  height: 80px;
  margin-bottom: 32px;
  animation: zoomInOut 1.5s infinite ease-in-out;
  transform-origin: center center;
}

@keyframes zoomInOut {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.3);
  }
}



    #resultSelect {
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      background: transparent;
      flex: 3;
    }

    #resultSelect::-ms-expand {
      display: none;
      /* IE and Edge */
    }

    #response {
      display: flex;
      flex-direction: row;
      gap: 10px;
    }

    #goBtn {
      flex: 1;
    }
  </style>
</head>

<body>
  <div class="loading-overlay" id="loadingOverlay">
    <img src="/image/favicon.png" alt="Logo" class="loading-logo" />
  </div>
  <div class="search-container" id="searchContainer">
    <div class="search-box">
      <input type="text" id="searchInput" placeholder="Type place (e.g. Durgapur, Bardhaman)">
      <span id="response">
        <select id="resultSelect" class="form-select">
          <option value="">Results will appear here</option>
        </select>
        <button class="btn btn-primary" id="goBtn">Go</button>
      </span>
    </div>
  </div>
  <div id="map"></div>

  <script src="https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js"></script>
  <script>
    // Red marker icon from leaflet-color-markers
    const redIcon = new L.Icon({
      iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowSize: [41, 41]
    });

    function showMapAndUI() {
      document.getElementById('loadingOverlay').style.display = 'none';
      document.getElementById('map').style.visibility = 'visible';
      document.getElementById('searchContainer').style.display = 'block';
    }

    let map, currentMarker;

    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        position => {
          setupMap(position.coords.latitude, position.coords.longitude);
        },
        err => {
          setupMap(23.0, 88.0, true);
        },
        { enableHighAccuracy: true, timeout: 8000, maximumAge: 0 }
      );
    } else {
      setupMap(23.0, 88.0, true);
    }

    function setupMap(lat, lon, fallback = false) {
      showMapAndUI();

      const indiaBounds = [
        [6.0, 68.0],
        [37.5, 97.5]
      ];

      map = L.map("map", { center: [lat, lon], zoom: 16, maxBounds: indiaBounds });
      map.setView([lat, lon], 16);
      map.setMaxBounds(indiaBounds);
      map.setMinZoom(5);
      map.on("drag", () => map.panInsideBounds(indiaBounds, { animate: false }));

      L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
        maxZoom: 19,
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
      }).addTo(map);

      currentMarker = L.marker([lat, lon], { icon: redIcon })
        .addTo(map)
        .bindPopup(fallback ? '<b>Default Location (Could not detect you)</b>' : '<b>Current Location</b>')
        .openPopup();

      const searchInput = document.getElementById("searchInput");
      const resultSelect = document.getElementById("resultSelect");
      const goBtn = document.getElementById("goBtn");

      searchInput.addEventListener("input", async () => {
        const query = searchInput.value.trim();
        if (!query) return;
        try {
          const res = await fetch(`https://nominatim.openstreetmap.org/search?format=json&limit=5&q=${encodeURIComponent(query)}&countrycodes=in`);
          const data = await res.json();
          resultSelect.innerHTML = "";
          if (data.length === 0) {
            resultSelect.innerHTML = `<option>No results found</option>`;
            return;
          }
          data.forEach((place) => {
            const option = document.createElement("option");
            option.value = JSON.stringify({ lat: place.lat, lon: place.lon });
            option.textContent = place.display_name;
            option.title = place.display_name;
            resultSelect.appendChild(option);
          });
        } catch (error) {
          console.error("Search error:", error);
          resultSelect.innerHTML = `<option>Error loading results</option>`;
        }
      });

      goBtn.addEventListener("click", () => {
        const selected = resultSelect.value;
        if (!selected) return alert("Please select a valid location.");
        const { lat, lon } = JSON.parse(selected);
        if (currentMarker) map.removeLayer(currentMarker);
        currentMarker = L.marker([lat, lon], { icon: redIcon })
          .addTo(map)
          .bindPopup("<b>Selected Location</b>")
          .openPopup();
        map.setView([lat, lon], 13);
      });

      map.on("click", (e) => {
        const lat = e.latlng.lat.toFixed(4);
        const lon = e.latlng.lng.toFixed(4);
        if (currentMarker) map.removeLayer(currentMarker);

        currentMarker = L.marker([lat, lon], { icon: redIcon })
          .addTo(map)
          .bindPopup(`
            <div>
              <b>Clicked Location:</b><br>Lat: ${lat}<br>Lon: ${lon}<br>
              <button id="confirmBtn" class="btn btn-sm btn-success mt-2" style="width: 110px; font-size: 0.76rem;">Confirm Location</button>
            </div>
          `)
          .openPopup();

        setTimeout(() => {
          const confirmBtn = document.getElementById("confirmBtn");
          if (confirmBtn) {
            confirmBtn.addEventListener("click", () => {
              fetch('/add-location', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ lat, lon }),
              })
                .then(response => response.json())
                .then(data => {
                  console.log('Location updated:', data);
                  setTimeout(() => {
                    window.location.href = '/';
                  }, 1500);
                })
                .catch(error => {
                  console.error('Error updating location:', error);
                  alert('Failed to update location. Please try again.');
                });
              currentMarker.closePopup();
            });
          }
        }, 100);
      });
    }
  </script>
</body>

</html>
