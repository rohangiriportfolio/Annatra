<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <title>Leaflet Map - India Only</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" type="image/png" href="/image/favicon.png">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" />

  <style>
    body,
    html {
      height: 100%;
      margin: 0;
      padding: 0;
    }

    body,
    html {
      height: 100%;
      margin: 0;
      padding: 0;
    }

    #map {
      height: 100vh;
      /* Ensures full screen usage below search */
      width: 100vw;
    }


    .search-container {
      position: absolute;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 1000;
      width: 90%;
      max-width: 600px;
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      padding: 12px 16px;
    }

    .search-box {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .search-box input,
    .search-box select {
      flex: 1;
      min-width: 0;
      padding: 10px 12px;
      font-size: 1rem;
      border: 1px solid #ccc;
      border-radius: 8px;
      outline: none;
    }

    .search-box button {
      padding: 10px 16px;
      font-size: 1rem;
      background-color: #0d6efd;
      color: white;
      border: none;
      border-radius: 8px;
      transition: background-color 0.2s ease;
    }

    .search-box button:hover {
      background-color: #0b5ed7;
    }

    .search-box select option {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    @media (max-width: 600px) {
      .search-box {
        flex-direction: column;
        gap: 8px;
      }

      .search-box button {
        width: 100%;
      }
    }
  </style>
</head>

<body>
  <div class="search-container">
    <div class="search-box">
      <input type="text" id="searchInput" placeholder="Type place (e.g. Durgapur, Bardhaman)">
      <select id="resultSelect" class="form-select">
        <option value="">-- Results will appear here --</option>
      </select>
      <button class="btn btn-primary" id="goBtn">Go</button>
    </div>
  </div>

  <div id="map"></div>

  <!-- Leaflet JS -->
  <script src="https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js"></script>

  <script>
    const map = L.map("map").setView([23.0, 88.0], 5);
    let currentMarker = null;

    // India bounding box to restrict map view
    const indiaBounds = [
      [6.0, 68.0],     // Southwest corner
      [37.5, 97.5]     // Northeast corner
    ];

    map.setMaxBounds(indiaBounds);       // Restrict view to India
    map.setMinZoom(5);                   // Prevent zooming too far out
    map.on("drag", () => {
      map.panInsideBounds(indiaBounds, { animate: false });
    });

    // Add OpenStreetMap tiles
    L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
      maxZoom: 19,
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    const searchInput = document.getElementById("searchInput");
    const resultSelect = document.getElementById("resultSelect");
    const goBtn = document.getElementById("goBtn");

    // Fetch suggestions when user types
    searchInput.addEventListener("input", async () => {
      const query = searchInput.value.trim();
      if (!query) return;

      try {
        const res = await fetch(`https://nominatim.openstreetmap.org/search?format=json&limit=5&q=${encodeURIComponent(query)}&countrycodes=in`);
        const data = await res.json();

        resultSelect.innerHTML = "";

        if (data.length === 0) {
          resultSelect.innerHTML = `<option>No results found</option>`;
          return;
        }

        data.forEach((place) => {
          const option = document.createElement("option");
          option.value = JSON.stringify({ lat: place.lat, lon: place.lon });
          option.textContent = place.display_name;
          option.title = place.display_name;
          resultSelect.appendChild(option);
        });
      } catch (error) {
        console.error("Search error:", error);
        resultSelect.innerHTML = `<option>Error loading results</option>`;
      }
    });

    // When "Go" is clicked
    goBtn.addEventListener("click", () => {
      const selected = resultSelect.value;
      if (!selected) return alert("Please select a valid location.");

      const { lat, lon } = JSON.parse(selected);

      if (currentMarker) map.removeLayer(currentMarker);

      currentMarker = L.marker([lat, lon]).addTo(map)
        .bindPopup("Selected Location")
        .openPopup();

      map.setView([lat, lon], 13);
    });

    // Click support
    map.on("click", (e) => {
      const lat = e.latlng.lat.toFixed(4);
      const lon = e.latlng.lng.toFixed(4);

      if (currentMarker) map.removeLayer(currentMarker);

      currentMarker = L.marker([lat, lon]).addTo(map)
        .bindPopup(`Clicked Location: <br>Lat: ${lat}, Lon: ${lon}`)
        .openPopup();

      fetch('/add-location', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ lat, lon })
      })
        .then(response => response.json())
        .then(data => {
          console.log('Location updated:', data);
          // Redirect after a short delay if needed
          setTimeout(() => {
            window.location.href = '/';
          }, 1500);
        })
        .catch(error => {
          console.error('Error updating location:', error);
          alert('Failed to update location. Please try again.');
        });
    });

  </script>
</body>

</html>